{"version":3,"file":"static/js/74.33dafac8.chunk.js","mappings":"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","sources":["components/tableAccessories/statusComponent.jsx","components/createNewModal/selectComponent.jsx","components/smallTable.jsx","components/createNewModal/AutoComplete.jsx","components/createNewModal/createNewModal.jsx","components/myTable.jsx"],"sourcesContent":["import React from 'react'\r\nimport clsx from 'clsx'\r\n\r\nimport ThumbUpAltIcon from '@mui/icons-material/ThumbUpAlt';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\n\r\nexport default function StatusComponent({text,staus}) {\r\n    const classes = clsx(\r\n        staus ===  \"Not Intersted\" && \"bg-red-300\",\r\n        staus === \"Important\" && \"bg-green-300\",\r\n        staus === \"Normal\"&& \"bg-orange-300\",\r\n        \r\n    )\r\n    \r\n  return staus === \"Important\" ? <ThumbUpAltIcon color='success'/> : staus === \"Not Intersted\" ? <ClearIcon color='error'/> : \"\"\r\n}\r\n","import React from 'react'\r\nimport {\r\n    MenuItem,\r\n    InputLabel,\r\n    FormControl,\r\n    Select\r\n  } from '@mui/material';\r\n\r\nexport default function SelectComponent({lable,keyValue,values,setValues,choisesArray}) {\r\n  return (\r\n    <FormControl>\r\n\r\n    <InputLabel id=\"demo-select-small-label\" >\r\n        {lable}\r\n    </InputLabel>\r\n    <Select\r\n        lable={lable}\r\n        value= {values[keyValue] || ''}\r\n        onChange={(e) => {\r\n            console.log(e.target.name)\r\n            setValues({ ...values, [e.target.name]: e.target.value })\r\n        }\r\n        }\r\n        inputProps={{\r\n            name: keyValue,\r\n\r\n        }}\r\n    >\r\n\r\n        {choisesArray.map(item =>\r\n            <MenuItem key={item[keyValue]} value={item[keyValue]}>{item[keyValue]}</MenuItem>\r\n        )}\r\n\r\n\r\n\r\n    </Select>\r\n</FormControl>)\r\n}\r\n","import React, { useMemo, useState, useEffect, useCallback } from \"react\";\r\nimport MaterialReactTable from \"material-react-table\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  IconButton,\r\n  MenuItem,\r\n  Stack,\r\n  TextField,\r\n  Tooltip,\r\n  InputLabel,\r\n  FormControl,\r\n  Select,\r\n} from \"@mui/material\";\r\nimport { Delete, Edit } from \"@mui/icons-material\";\r\nimport { usePostAxios } from \"../hoocs/useFetchAxios\";\r\nimport SelectComponent from \"./createNewModal/selectComponent\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport dayjs from \"dayjs\";\r\n\r\nimport AddIcCallIcon from \"@mui/icons-material/AddIcCall\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\n\r\nexport default function SmallTable({\r\n  row,\r\n  open,\r\n  onClose,\r\n  contactType,\r\n  contactResult,\r\n}) {\r\n  const [loading, setLoadng] = useState(true);\r\n  const [createModalOpen, setCreateModalOpen] = useState(false);\r\n  const [data, setData] = useState([]);\r\n\r\n  //get jwt from redux\r\n  const jwt = useSelector((state) => state.user.access);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(row.original.contact_url)\r\n      .then((res) => {\r\n        setData(res.data.results);\r\n        setLoadng(false);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err); // normal error if there is no contacts\r\n        // if there is no data\r\n        setLoadng(false);\r\n      });\r\n  }, [ data]);\r\n\r\n  // Table Columns\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        accessorKey: \"typ\",\r\n        header: \"contact_type\",\r\n        muiTableBodyCellEditTextFieldProps: {\r\n          select: true, //change to select for a dropdown\r\n          children: contactType.map((contactType) => (\r\n            <MenuItem\r\n              key={contactType.contact_type}\r\n              defaultValue=\"\"\r\n              value={contactType.contact_type}\r\n            >\r\n              {contactType.contact_type}\r\n            </MenuItem>\r\n          )),\r\n        },\r\n      },\r\n\r\n      {\r\n        accessorKey: \"date\",\r\n        header: \"date\",\r\n        filterFn: \"lessThanOrEqualTo\",\r\n        sortingFn: \"datetime\",\r\n      },\r\n      {\r\n        accessorKey: \"result\",\r\n        header: \"Result\",\r\n        muiTableBodyCellEditTextFieldProps: {\r\n          select: true, //change to select for a dropdown\r\n          children: contactResult.map((contactResult) => (\r\n            <MenuItem\r\n              key={contactResult.contact_result}\r\n              defaultValue=\"\"\r\n              value={contactResult.contact_result}\r\n            >\r\n              {contactResult.contact_result}\r\n            </MenuItem>\r\n          )),\r\n        },\r\n      },\r\n    ],\r\n\r\n    []\r\n  );\r\n\r\n  const handleCreateNewRow = (values) => {\r\n    // you need another solution this row.original.contact_url is for company not contact\r\n    // values[ \"contact_url\"] = row.original.contact_url; // because you will lose the link when submitting the values\r\n    console.log(values);\r\n    data.push(values);\r\n    setData([...data]);\r\n    console.log(row);\r\n  };\r\n\r\n  // editing logic\r\n  const handleSaveRowEdits = ({ exitEditingMode, row, values }) => {\r\n    // edit the row in the frontend\r\n    values[\"contact_url\"] = row.original.contact_url;\r\n    data[row.index] = values;\r\n    setData([...data]);\r\n\r\n    //\r\n\r\n    // grabing the endpoint\r\n    const url = row.original.contact_url;\r\n\r\n    // rewite the obj for the serializer\r\n    const obj = {\r\n      contact_type: values.typ,\r\n      date: values.date,\r\n      contact_result: values.result,\r\n    };\r\n    console.log(obj);\r\n\r\n    // posting with axios\r\n    axios\r\n      .put(url, obj, {\r\n        headers: { Authorization: `JWT ${jwt}` },\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n      })\r\n      .catch((err) => console.log(err));\r\n\r\n    exitEditingMode(); //required to exit editing mode and close modal\r\n  };\r\n\r\n  const handleDeleteRow = useCallback(\r\n    (row) => {\r\n      if (\r\n        !window.confirm(\r\n          `Are you sure you want to delete ${row.getValue(\"date\")} contact`\r\n        )\r\n      ) {\r\n      }\r\n\r\n      //send api delete request here, then refetch or update local table data for re-render\r\n      console.log(row.original.contact_url);\r\n      axios\r\n        .delete(row.original.contact_url,{\r\n          headers: { Authorization: `JWT ${jwt}` },\r\n        })\r\n        .then((res) => {\r\n          console.log(res);\r\n        })\r\n        .catch((err) => console.log(err.response.data));\r\n\r\n      // update table\r\n      data.splice(row.index, 1);\r\n      setData([...data]);\r\n    },\r\n    [data]\r\n  );\r\n\r\n  const handleCancelRowEdits = () => {\r\n    console.log(\"canceld\");\r\n  };\r\n  return (\r\n    row && (\r\n      <>\r\n        <Dialog\r\n          fullWidth\r\n          maxWidth=\"md\"\r\n          sx={{\r\n            p: 1,\r\n            width: \"1500px\",\r\n            height: \"100%\",\r\n          }}\r\n          open={open}\r\n          onClose={onClose}\r\n        >\r\n          <DialogTitle\r\n            className=\"text-blue-900 font-extrabold  \"\r\n            textAlign=\"center\"\r\n          >\r\n            <p className=\"  inline text-black \">Contact History of</p>{\" \"}\r\n            {row.original.name}\r\n          </DialogTitle>\r\n\r\n          <Box className=\"p-5\">\r\n            {/* Email , Phone Number and website */}\r\n\r\n            <div className=\"flex flex-row items-center justify-start space-x-10 p-1 mb-1\">\r\n              <div className=\"flex flex-row items-center justify-start space-x-2\">\r\n                <p>Phone Number : </p>\r\n                <p>{row.original.phone + \" \"}</p>\r\n                <a href={`tel:${row.original.phone}`}>\r\n                  <AddIcCallIcon fontSize=\"small\" color=\"success\" />\r\n                </a>\r\n              </div>\r\n              <div className=\"flex flex-row items-center justify-start space-x-2\">\r\n                <p>Email : </p>\r\n                <p id=\"email\">{row.original.email} </p>\r\n                <Button\r\n                  onClick={() => {\r\n                    navigator.clipboard.writeText(\r\n                      document.getElementById(\"email\").textContent\r\n                    );\r\n                  }}\r\n                >\r\n                  Copy Email\r\n                </Button>\r\n                {row.original.website === null ||\r\n                row.original.website === \"nan\" ||\r\n                row.original.website === \"\" ||\r\n                row.original.website === \" \" ? (\r\n                  \"\"\r\n                ) : (\r\n                  <Button\r\n                    href={`${row.original.website}`}\r\n                    target=\"_blank\"\r\n                    className=\"text-blue-500 text-bold\"\r\n                  >\r\n                    Go To Website\r\n                  </Button>\r\n                )}\r\n              </div>\r\n            </div>\r\n            <MaterialReactTable\r\n              columns={columns || []}\r\n              data={data}\r\n              state={{ isLoading: loading }}\r\n              enablePagination={false}\r\n              enableGlobalFilter={false}\r\n              enableDensityToggle={false}\r\n              enableGlobalFilterRankedResults={false}\r\n              // editing\r\n              enableEditing\r\n              enableD\r\n              onEditingRowSave={handleSaveRowEdits}\r\n              onEditingRowCancel={handleCancelRowEdits}\r\n              renderRowActions={({ row, table }) => (\r\n                <Box sx={{ display: \"flex\", gap: \"1rem\" }}>\r\n                  <Tooltip arrow placement=\"left\" title=\"Edit\">\r\n                    <IconButton onClick={() => table.setEditingRow(row)}>\r\n                      <Edit />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n\r\n                  <Tooltip arrow placement=\"right\" title=\"Delete\">\r\n                    <IconButton\r\n                      color=\"error\"\r\n                      onClick={() => handleDeleteRow(row)}\r\n                    >\r\n                      <Delete />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </Box>\r\n              )}\r\n              renderTopToolbarCustomActions={() => (\r\n                <Button\r\n                  color=\"secondary\"\r\n                  onClick={() => setCreateModalOpen(true)}\r\n                  variant=\"contained\"\r\n                >\r\n                  Add New Contact\r\n                </Button>\r\n              )}\r\n            />\r\n            <CreateNewCompanyModal\r\n              company_row={row}\r\n              columns={columns}\r\n              open={createModalOpen}\r\n              onClose={() => setCreateModalOpen(false)}\r\n              onSubmit={handleCreateNewRow}\r\n              contactType={contactType}\r\n              contactResult={contactResult}\r\n            />\r\n          </Box>\r\n          <DialogActions sx={{ p: \"1.25rem\" }}>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </>\r\n    )\r\n  );\r\n}\r\n\r\n// Modal for creating new contact\r\nconst CreateNewCompanyModal = ({\r\n  open,\r\n  columns,\r\n  onClose,\r\n  onSubmit,\r\n  company_row,\r\n  contactType,\r\n  contactResult,\r\n}) => {\r\n  //get jwt from redux\r\n  const jwt = useSelector((state) => state.user.access);\r\n\r\n  // react table ??\r\n  const [values, setValues] = useState(() =>\r\n    columns.reduce((acc, column) => {\r\n      acc[column.accessorKey ?? \"\"] = \"\";\r\n      return acc;\r\n    }, {})\r\n  );\r\n\r\n  // Submit New Contact\r\n  const handleSubmit = () => {\r\n    console.log(values);\r\n    //put your validation logic here\r\n\r\n    // 1- handle todays date as default\r\n    if (values.date === \"\") {\r\n      values.date = dayjs().format(\"YYYY-MM-DD\");\r\n    }\r\n\r\n    // grabing the endpoint\r\n    const url = \"http://localhost:8000/api/companies/\";\r\n    const company_id = company_row.original.id;\r\n    const endpoint = \"company/\" + company_id;\r\n\r\n    // rewite the obj for the serializer\r\n    const obj = {\r\n      contact_type: values.contact_type,\r\n      date: values.date,\r\n      contact_result: values.contact_result,\r\n    };\r\n\r\n    // posting with axios\r\n    axios\r\n      .post(url + endpoint, obj, {\r\n        headers: { Authorization: `JWT ${jwt}` },\r\n      })\r\n      .catch((err) => console.log(err.response.data));\r\n    console.log(obj);\r\n\r\n    // update the table\r\n    values[\"typ\"] = values[\"contact_type\"];\r\n    values[\"result\"] = values[\"contact_result\"];\r\n\r\n    onSubmit(values);\r\n\r\n    // close the modal\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Dialog open={open}>\r\n        <DialogTitle textAlign=\"center\">Create New Account</DialogTitle>\r\n        <DialogContent>\r\n          <form onSubmit={(e) => e.preventDefault()}>\r\n            <Stack\r\n              sx={{\r\n                width: \"100%\",\r\n                minWidth: { xs: \"300px\", sm: \"360px\", md: \"400px\" },\r\n                gap: \"1.5rem\",\r\n              }}\r\n            >\r\n              {/* Contact */}\r\n              <SelectComponent\r\n                lable={\"Contact Type\"}\r\n                keyValue={\"contact_type\"}\r\n                choisesArray={contactType}\r\n                values={values}\r\n                setValues={setValues}\r\n              />\r\n\r\n              <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                <DatePicker\r\n                  defaultValue={dayjs()}\r\n                  label=\"Date\"\r\n                  onChange={(v) => {\r\n                    console.log(dayjs().format(\"YYYY-MM-DD\"));\r\n                    setValues({\r\n                      ...values,\r\n                      [\"date\"]: `${v.$y}-${v.$M + 1}-${v.$D}`,\r\n                    });\r\n                  }}\r\n                />\r\n              </LocalizationProvider>\r\n\r\n              {/* Results */}\r\n              <SelectComponent\r\n                lable={\"Contact Result\"}\r\n                keyValue={\"contact_result\"}\r\n                choisesArray={contactResult}\r\n                values={values}\r\n                setValues={setValues}\r\n              />\r\n            </Stack>\r\n          </form>\r\n        </DialogContent>\r\n        <DialogActions sx={{ p: \"1.25rem\" }}>\r\n          <Button onClick={onClose}>Cancel</Button>\r\n          <Button color=\"secondary\" onClick={handleSubmit} variant=\"contained\">\r\n            Create New Account\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\n// todos :\r\n// 1- create , update , delete contact\r\n","import React from 'react'\r\nimport { Autocomplete, TextField, Box } from '@mui/material';\r\n\r\nexport default function AutoComplete({ options, setValues, values }) {\r\n    return (\r\n\r\n        <>\r\n            <Autocomplete\r\n\r\n                getOptionLabel={(option) => option.name}\r\n\r\n                onChange={(e, newValue) => {\r\n                    setValues({ ...values, [\"country\"]:newValue.name })\r\n                    console.log(newValue);\r\n\r\n                }}\r\n                disablePortal\r\n                className=''\r\n                options={options}\r\n                renderInput={\r\n                    prams =>\r\n                        <TextField label=\"Country\" {...prams} />\r\n\r\n                }\r\n                renderOption={\r\n                    (props, option) =>\r\n\r\n                        <Box component=\"li\" {...props}>\r\n                            {/* <img className='m-2 shrink-0' loading='lazy' src={`https://flagcdn.com/w20/${option.code.toLowerCase()}.png`}\r\n                            srcSet={`https://flagcdn.com/w40/${option.code.toLowerCase()}.png 2x`}\r\n                            alt=\"\" />  */}\r\n                            {/* {option} ({option.code}  ) +{option.phone} */}\r\n\r\n                            {option.name}\r\n\r\n\r\n\r\n                        </Box>\r\n\r\n                }\r\n            />\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n","import React, { useMemo, useState, useCallback, useEffect } from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    IconButton,\r\n    MenuItem,\r\n    NativeSelect,\r\n    Stack,\r\n    TextField,\r\n    Tooltip,\r\n    InputLabel,\r\n    Select,\r\n    FormControl,\r\n\r\n} from '@mui/material';\r\n\r\nimport axios from 'axios';\r\nimport AutoComplete from './AutoComplete';\r\nimport SelectComponent from './selectComponent';\r\n\r\n//redux\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst CreateNewAccountModal = ({ open, columns, onClose, onSubmit, states }) => {\r\n\r\n    // Access the jwt from redux\r\n    const jwt = useSelector(state => state.user.access)\r\n\r\n\r\n    const [values, setValues] = useState(() =>\r\n        columns.reduce((acc, column) => {\r\n            acc[column.accessorKey ?? ''] = '';\r\n            return acc;\r\n        }, {}),\r\n    );\r\n    const [err, setErr] = useState(\"\")\r\n\r\n    const handleSubmit = () => {\r\n        //put your validation logic here\r\n        console.log(values)\r\n\r\n        // copy value to obj to handle country cell\r\n        const obj = Object.assign({}, values)\r\n        delete obj[\"country_name\"]\r\n\r\n        //handle status cell\r\n        obj[\"status\"] = obj[\"status\"] == \"Important\" ? true : obj[\"status\"] == \"Not Intersted\" ? false : null\r\n\r\n        console.log(obj)\r\n        axios.post(\"http://127.0.0.1:8000/api/companies/\", obj,{headers: {Authorization: `JWT ${jwt}`}})\r\n            .then(res => {\r\n                console.log(res)\r\n                onClose();\r\n            }).catch(err => {\r\n                console.log(err.response.data)\r\n                setErr(err.response.data)\r\n            })\r\n\r\n        setErr(\"\")\r\n\r\n        // update some values to fit in the table\r\n           values[\"country_name\"] = values[\"country\"]\r\n           values[\"status\"] = obj[\"status\"]\r\n            \r\n        // uptate table values    \r\n        onSubmit(values);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={open}>\r\n                <DialogTitle textAlign=\"center\">Create New Account</DialogTitle>\r\n                <DialogContent>\r\n                    <form onSubmit={(e) => e.preventDefault()}>\r\n                        <Stack\r\n                            sx={{\r\n                                width: '100%',\r\n                                minWidth: { xs: '300px', sm: '360px', md: '400px' },\r\n                                gap: '1.5rem',\r\n                                padding: \"10px\"\r\n                            }}\r\n                        >\r\n\r\n                            <h3 className='text-red-500'> {`${JSON.stringify(err)}`}</h3>\r\n\r\n\r\n\r\n\r\n                            {/* Company Name */}\r\n                            <TextField\r\n                                key={columns[0].accessorKey}\r\n                                label={columns[0].header}\r\n                                name={columns[0].accessorKey}\r\n                                onChange={(e) =>\r\n                                    setValues({ ...values, [e.target.name]: e.target.value })\r\n                                }\r\n                            />\r\n\r\n\r\n\r\n\r\n                            {/* Country Name */}\r\n                            <AutoComplete options={states} setValues={setValues} values={values} />\r\n\r\n\r\n\r\n\r\n\r\n\r\n                            {/* Status */}\r\n                            {/* <SelectComponent  /> */}\r\n\r\n                            <FormControl>\r\n\r\n                                <InputLabel id=\"demo-select-small-label\" >\r\n                                    Status\r\n                                </InputLabel>\r\n                                <Select\r\n                                    labelId=\"demo-select-small-label\"\r\n                                    id=\"demo-simple-select\"\r\n                                    lable=\"status\"\r\n                                    value={values[\"status\"]}\r\n                                    onChange={(e) => {\r\n                                        console.log(e.target.name, e.target.value)\r\n                                        setValues({ ...values, [e.target.name]: e.target.value })\r\n                                    }\r\n                                    }\r\n                                    inputProps={{\r\n                                        name: columns[2].accessorKey,\r\n\r\n                                    }}\r\n                                >\r\n\r\n                                    {[\"Important\", \"Not Intersted\", \"Normal\"].map(item =>\r\n                                        <MenuItem key={item} value={item}>{item}</MenuItem>\r\n                                    )}\r\n\r\n\r\n\r\n                                </Select>\r\n                            </FormControl>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                            <TextField\r\n                                key={columns[5].accessorKey}\r\n                                label={columns[5].header}\r\n                                name={columns[5].accessorKey}\r\n                                onChange={(e) =>\r\n                                    setValues({ ...values, [e.target.name]: e.target.value })\r\n                                }\r\n                            />\r\n                            <TextField\r\n                                key={columns[3].accessorKey}\r\n                                label={columns[3].header}\r\n                                name={columns[3].accessorKey}\r\n                                onChange={(e) =>\r\n                                    setValues({ ...values, [e.target.name]: e.target.value })\r\n                                }\r\n                            />\r\n                            <TextField\r\n                                key={columns[4].accessorKey}\r\n                                label={columns[4].header}\r\n                                name={columns[4].accessorKey}\r\n                                onChange={(e) =>\r\n                                    setValues({ ...values, [e.target.name]: e.target.value })\r\n                                }\r\n                            />\r\n\r\n\r\n\r\n\r\n                            <TextField\r\n                                key={columns[6].accessorKey}\r\n                                label={columns[6].header}\r\n                                name={columns[6].accessorKey}\r\n                                onChange={(e) =>\r\n                                    setValues({ ...values, [e.target.name]: e.target.value })\r\n                                }\r\n                            />\r\n\r\n                        </Stack>\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions sx={{ p: '1.25rem' }}>\r\n                    <Button onClick={onClose}>Cancel</Button>\r\n                    <Button color=\"secondary\" onClick={handleSubmit} variant=\"contained\">\r\n                        Create New Account\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default CreateNewAccountModal","import React, { useMemo, useState, useCallback, useEffect } from \"react\";\r\n// import {handleSaveRowEdits} from \"../helper/mainTableHelper\"\r\nimport StatusComponent from \"./tableAccessories/statusComponent\";\r\n\r\nimport MaterialReactTable from \"material-react-table\";\r\nimport SmallTable from \"./smallTable\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  IconButton,\r\n  MenuItem,\r\n  NativeSelect,\r\n  Stack,\r\n  TextField,\r\n  Tooltip,\r\n  InputLabel,\r\n} from \"@mui/material\";\r\n\r\n// icons\r\nimport {\r\n  CommentsDisabledOutlined,\r\n  Create,\r\n  Delete,\r\n  Edit,\r\n  TroubleshootOutlined,\r\n} from \"@mui/icons-material\";\r\nimport AddIcCallIcon from \"@mui/icons-material/AddIcCall\";\r\nimport TableViewIcon from \"@mui/icons-material/TableView\";\r\n\r\n\r\nimport axios from \"axios\";\r\nimport CreateNewAccountModal from \"./createNewModal/createNewModal\";\r\n\r\n//redux\r\nimport { useSelector } from \"react-redux\";\r\n\r\nexport default function Table({\r\n  tableData,\r\n  setTableData,\r\n  states,\r\n  contactType,\r\n  contactResult,\r\n}) {\r\n  // states\r\n\r\n  //data and fetching state\r\n\r\n  // const [isError, setIsError] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // useEffect(() => {\r\n  //   setIsLoading(true)\r\n  //   axios.get(\"http://127.0.0.1:8000/api/companies/\").then(\r\n  //     (res) => {\r\n  //       setTableData(res.data.results)\r\n  //       setIsLoading(false)\r\n  //     }).catch(err => { console.log(err) })\r\n\r\n  // }, [])\r\n\r\n  const [createModalOpen, setCreateModalOpen] = useState(false);\r\n  const [SmallTableOpen, setSmallTableOpen] = useState(false);\r\n  const [rowSmallTable, setRow] = useState();\r\n\r\n  //get jwt from redux\r\n  const jwt = useSelector((state) => state.user.access);\r\n\r\n  // const [tableData, setTableData] = useState([])\r\n  const [validationErrors, setValidationErrors] = useState({});\r\n  const handleSmallTable = (row) => {\r\n    setRow(row);\r\n    setSmallTableOpen(true);\r\n    console.log(row);\r\n    console.log(rowSmallTable);\r\n  };\r\n\r\n  const handleSaveRowEdits = async ({ exitEditingMode, row, values }) => {\r\n    if (!Object.keys(validationErrors).length) {\r\n      //put your validation logic here\r\n\r\n      // copy value to obj to handle country cell\r\n      const obj = Object.assign({}, values);\r\n      obj[\"country\"] = obj[\"country_name\"];\r\n      delete obj[\"country_name\"];\r\n\r\n      //handle status cell\r\n      obj[\"status\"] =\r\n        obj[\"status\"] == \"Important\"\r\n          ? true\r\n          : obj[\"status\"] == \"Not Intersted\"\r\n          ? false\r\n          : null;\r\n\r\n      // update database\r\n      axios\r\n        .put(row.original.company_url, obj, {\r\n          headers: { Authorization: `JWT ${jwt}` },\r\n        })\r\n        .then((res) => {\r\n          console.log(res);\r\n        })\r\n        .catch((err) => {\r\n          const error = err.response.data;\r\n          alert(Object.entries(error));\r\n        });\r\n\r\n      // update table data\r\n      values[\"company_url\"] = row.original.company_url; // update contact url you lose it when you edit\r\n      values[\"contact_url\"] = row.original.contact_url; // update contact url you lose it when you edit\r\n      values[\"status\"] = obj[\"status\"]; // update status to true or false\r\n      tableData[row.index] = values; // update row\r\n\r\n      setTableData([...tableData]);\r\n      exitEditingMode(); //required to exit editing mode and close modal\r\n    }\r\n  };\r\n\r\n  const handleCancelRowEdits = () => {\r\n    setValidationErrors({});\r\n  };\r\n\r\n  const handleDeleteRow = useCallback(\r\n    (row) => {\r\n      if (\r\n        !window.confirm(\r\n          `Are you sure you want to delete ${row.getValue(\"name\")}`\r\n        )\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      //send api delete request here, then refetch or update local table data for re-render\r\n      console.log(row.original);\r\n      axios\r\n        .delete(row.original.company_url, {\r\n          headers: { Authorization: `JWT ${jwt}` },\r\n        })\r\n        .then((res) => {\r\n          console.log(res);\r\n        });\r\n\r\n      tableData.splice(row.index, 1);\r\n      setTableData([...tableData]);\r\n    },\r\n    [tableData]\r\n  );\r\n\r\n  const handleCreateNewRow = (values) => {\r\n    tableData.push(values);\r\n    setTableData([...tableData]);\r\n  };\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        accessorKey: \"name\",\r\n        header: \"Company Name\",\r\n        size: 30,\r\n        enableClickToCopy: true,\r\n      },\r\n\r\n      {\r\n        accessorKey: \"country_name\",\r\n        header: \"Country\",\r\n        size: 10,\r\n\r\n        muiTableBodyCellEditTextFieldProps: {\r\n          select: true, //change to select for a dropdown\r\n          children: states.map((state) => (\r\n            <MenuItem key={state.name} value={state.name}>\r\n              {state.name}\r\n            </MenuItem>\r\n          )),\r\n        },\r\n      },\r\n      {\r\n        accessorKey: \"status\",\r\n\r\n        // to be able to sort by status you need to add accessorFn to extract the value from the row\r\n        accessorFn: (row) => {\r\n          return row.status === true\r\n            ? \"Important\"\r\n            : row.status === false\r\n            ? \"Not Intersted\"\r\n            : \"Normal\";\r\n        },\r\n\r\n        header: \"Status\",\r\n        size: 3,\r\n\r\n        Cell: ({ cell, column }) => {\r\n          return (\r\n            <StatusComponent text={cell.getValue()} staus={cell.getValue()} />\r\n          );\r\n        },\r\n        muiTableBodyCellEditTextFieldProps: ({ cell, column, row, table }) => {\r\n          return {\r\n            select: true, //change to select for a dropdown\r\n\r\n            //to get the value of the cell\r\n            children: [\"Important\", \"Not Intersted\", \"Normal\"].map((status) => (\r\n              <MenuItem key={status} value={status}>\r\n                {status}\r\n              </MenuItem>\r\n            )),\r\n          };\r\n        },\r\n      },\r\n      {\r\n        accessorKey: \"manager\",\r\n        header: \"Manager\",\r\n        size: 10,\r\n        Cell: ({ cell, column }) => {\r\n          if (\r\n            cell.getValue() === null ||\r\n            cell.getValue() === \"nan\" ||\r\n            cell.getValue() === \"\" ||\r\n            cell.getValue() === \" \"\r\n          ) {\r\n            return \"\";\r\n          } else {\r\n            return cell.getValue();\r\n          }\r\n        },\r\n      },\r\n      {\r\n        accessorKey: \"phone\",\r\n        header: \"Phone\",\r\n        size: 30,\r\n        enableClickToCopy: true,\r\n        Cell: ({ cell, column }) => {\r\n          if (\r\n            cell.getValue() === null ||\r\n            cell.getValue() === \"nan\" ||\r\n            cell.getValue() === \"\" ||\r\n            cell.getValue() === \" \"\r\n          ) {\r\n            return \"\";\r\n          } else {\r\n            return (\r\n              <>\r\n                <p>{cell.getValue()}</p>\r\n                <a\r\n                  href={`tel:${cell.getValue()}`}\r\n                  className=\"hover:shadow-lg hover:shadow-blue-500\"\r\n                >\r\n                  <AddIcCallIcon fontSize=\"small\" color=\"success\" />\r\n                </a>\r\n              </>\r\n            );\r\n          }\r\n        },\r\n      },\r\n      {\r\n        accessorKey: \"email\",\r\n        header: \"Email\",\r\n        size: 10,\r\n        enableClickToCopy: true,\r\n        Cell: ({ cell, column }) => {\r\n          if (\r\n            cell.getValue() === null ||\r\n            cell.getValue() === \"nan\" ||\r\n            cell.getValue() === \"\" ||\r\n            cell.getValue() === \" \"\r\n          ) {\r\n            return \"\";\r\n          } else {\r\n            return (\r\n              <p className=\"text-blue-500 text-bold shadow-blue-300\"> Copy </p>\r\n            );\r\n          }\r\n        },\r\n      },\r\n      {\r\n        accessorKey: \"website\",\r\n        header: \"Website\",\r\n        size: 10,\r\n        enableClickToCopy: true,\r\n        Cell: ({ cell, column }) => {\r\n          if (\r\n            cell.getValue() === null ||\r\n            cell.getValue() === \"nan\" ||\r\n            cell.getValue() === \"\" ||\r\n            cell.getValue() === \" \"\r\n          ) {\r\n            return \"\";\r\n          } else {\r\n            return (\r\n              <a\r\n                href={`${cell.getValue()}`}\r\n                target=\"_blank\"\r\n                className=\"text-blue-500 text-bold\"\r\n              >\r\n                {\" \"}\r\n                Click{\" \"}\r\n              </a>\r\n            );\r\n          }\r\n        },\r\n      },\r\n\r\n      // {\r\n      //     accessorKey: 'status', header: 'Status', size: 50,\r\n      //      accessorFn: (row) => {\r\n      //        if (row.important)return \"Important\"\r\n      //        if (row.not_intersted)return \"Not Intersted\"\r\n      //        else return \"Normal\"\r\n\r\n      //      },\r\n      //     //type: \"singleSelect\",\r\n      // //    valueOptions: [\"important\", \"Not Intersted\", \"Normal\"],\r\n      //     // renderCell:prams=>{console.log(prams.colDef.valueOptions)}\r\n      // },\r\n      // {\r\n      //     accessorKey: 'Update', header: 'Update', size: 50,\r\n      //   //  renderCell: (prams) => <Button onClick={() => console.log(prams.row)}> Update</Button>\r\n      // },\r\n    ],\r\n    [states]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <MaterialReactTable\r\n        editingMode=\"modal\"\r\n        displayColumnDefOptions={{\r\n          \"mrt-row-actions\": {\r\n            muiTableHeadCellProps: {\r\n              align: \"center\",\r\n            },\r\n            size: 40,\r\n          },\r\n        }}\r\n        columns={columns || []}\r\n        data={tableData || []}\r\n        enableColumnOrdering\r\n        enableEditing\r\n        // state={{ isLoading: isLoading }}\r\n        onEditingRowSave={handleSaveRowEdits}\r\n        onEditingRowCancel={handleCancelRowEdits}\r\n        renderRowActions={({ row, table }) => (\r\n          <Box sx={{ display: \"flex\", gap: \"1rem\" }}>\r\n            <Tooltip arrow placement=\"left\" title=\"Edit\">\r\n              <IconButton onClick={() => table.setEditingRow(row)}>\r\n                <Edit fontSize=\"small\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Tooltip arrow placement=\"right\" title=\"Delete\">\r\n              <IconButton color=\"error\" onClick={() => handleDeleteRow(row)}>\r\n                <Delete fontSize=\"small\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n\r\n            <Tooltip arrow placement=\"right\" title=\"Contact History\">\r\n              <IconButton\r\n                color=\"secondary\"\r\n                onClick={() => handleSmallTable(row)}\r\n              >\r\n                <TableViewIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Box>\r\n        )}\r\n        renderTopToolbarCustomActions={() => (\r\n          <Button\r\n            color=\"secondary\"\r\n            onClick={() => setCreateModalOpen(true)}\r\n            variant=\"contained\"\r\n          >\r\n            Create New Account\r\n          </Button>\r\n        )}\r\n      />\r\n\r\n      {SmallTableOpen && (\r\n        <SmallTable\r\n          contactType={contactType}\r\n          contactResult={contactResult}\r\n          row={rowSmallTable}\r\n          open={SmallTableOpen}\r\n          onClose={() => setSmallTableOpen(false)}\r\n          // onSubmit={handleCreateNewRow}\r\n          // states={states}\r\n        />\r\n      )}\r\n      {/* the Modal to Add new Company */}\r\n      <CreateNewAccountModal\r\n        columns={columns}\r\n        open={createModalOpen}\r\n        onClose={() => setCreateModalOpen(false)}\r\n        onSubmit={handleCreateNewRow}\r\n        states={states}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"],"names":["StatusComponent","_ref","text","staus","clsx","_jsx","ThumbUpAltIcon","color","ClearIcon","SelectComponent","lable","keyValue","values","setValues","choisesArray","_jsxs","FormControl","children","InputLabel","id","Select","value","onChange","e","console","log","target","name","_objectSpread","_defineProperty","inputProps","map","item","MenuItem","SmallTable","row","open","onClose","contactType","contactResult","_useState","useState","_useState2","_slicedToArray","loading","setLoadng","_useState3","_useState4","createModalOpen","setCreateModalOpen","_useState5","_useState6","data","setData","jwt","useSelector","state","user","access","useEffect","axios","original","contact_url","then","res","results","catch","err","columns","useMemo","accessorKey","header","muiTableBodyCellEditTextFieldProps","select","defaultValue","contact_type","filterFn","sortingFn","contact_result","handleDeleteRow","useCallback","window","confirm","concat","getValue","headers","Authorization","response","splice","index","_toConsumableArray","_Fragment","Dialog","fullWidth","maxWidth","sx","p","width","height","DialogTitle","className","textAlign","Box","phone","href","AddIcCallIcon","fontSize","email","Button","onClick","navigator","clipboard","writeText","document","getElementById","textContent","website","MaterialReactTable","isLoading","enablePagination","enableGlobalFilter","enableDensityToggle","enableGlobalFilterRankedResults","enableEditing","enableD","onEditingRowSave","_ref2","exitEditingMode","url","obj","typ","date","result","onEditingRowCancel","renderRowActions","_ref3","table","display","gap","Tooltip","arrow","placement","title","IconButton","setEditingRow","Edit","Delete","renderTopToolbarCustomActions","variant","CreateNewCompanyModal","company_row","onSubmit","push","DialogActions","_ref4","_useState7","reduce","acc","column","_column$accessorKey","_useState8","DialogContent","preventDefault","Stack","minWidth","xs","sm","md","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","dayjs","label","v","format","$y","$M","$D","endpoint","AutoComplete","options","Autocomplete","getOptionLabel","option","newValue","disablePortal","renderInput","prams","TextField","renderOption","props","component","states","setErr","padding","JSON","stringify","labelId","Object","assign","Table","tableData","setTableData","SmallTableOpen","setSmallTableOpen","rowSmallTable","setRow","_useState9","_useState10","validationErrors","setValidationErrors","handleSaveRowEdits","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","keys","length","company_url","error","alert","entries","stop","_x","apply","arguments","size","enableClickToCopy","accessorFn","status","Cell","cell","_ref5","_ref6","_ref7","_ref8","_ref9","editingMode","displayColumnDefOptions","muiTableHeadCellProps","align","enableColumnOrdering","_ref10","handleSmallTable","TableViewIcon","CreateNewAccountModal"],"sourceRoot":""}